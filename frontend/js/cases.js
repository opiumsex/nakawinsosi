class Cases {
    static init() {
        this.loadCases();
        this.setupEventListeners();
    }

    static async loadCases() {
        try {
            console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–æ–≤...');
            const response = await fetch('/api/cases');
            const data = await response.json();

            if (data.success) {
                console.log('‚úÖ –ö–µ–π—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data.cases.length);
                this.renderCases(data.cases);
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤:', data.message);
                Notifications.show('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤', 'error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤:', error);
            Notifications.show('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        }
    }

    static renderCases(cases) {
        const container = document.getElementById('casesContainer');
        
        if (!cases || cases.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <h3>üéÅ –ö–µ–π—Å—ã —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!</h3>
                    <p>–ú—ã –≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–µ–π—Å—ã</p>
                </div>
            `;
            return;
        }

        container.innerHTML = cases.map(caseItem => {
            const avgValue = caseItem.items.reduce((sum, item) => sum + item.value, 0) / caseItem.items.length;
            const rarity = this.getRarity(avgValue);
            
            return `
                <div class="case-item" data-case-id="${caseItem._id}">
                    <div class="case-rarity rarity-${rarity}">${rarity.toUpperCase()}</div>
                    <div class="case-image">
                        <img src="${caseItem.image || '/images/default-case.png'}" alt="${caseItem.name}">
                    </div>
                    <div class="case-info">
                        <h3>${caseItem.name}</h3>
                        <div class="case-price">${caseItem.price} –º–æ–Ω–µ—Ç</div>
                        <div class="case-items-count">${caseItem.items.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤</div>
                    </div>
                    <button class="btn-glow btn-rounded open-case-btn">
                        üéØ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å
                    </button>
                </div>
            `;
        }).join('');
    }

    static getRarity(value) {
        if (value >= 1000) return 'legendary';
        if (value >= 500) return 'epic';
        if (value >= 200) return 'rare';
        if (value >= 100) return 'uncommon';
        return 'common';
    }

    static setupEventListeners() {
        document.getElementById('casesContainer').addEventListener('click', (e) => {
            if (e.target.classList.contains('open-case-btn') || e.target.closest('.case-item')) {
                const caseItem = e.target.closest('.case-item');
                if (caseItem) {
                    this.openCase(caseItem.dataset.caseId);
                }
            }
        });
    }

    static async openCase(caseId) {
        console.log('üéÅ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', caseId);
        
        if (!window.auth || !window.auth.token) {
            Notifications.show('–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤', 'error');
            return;
        }

        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ makeAuthenticatedRequest –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            const response = await window.auth.makeAuthenticatedRequest(`/api/cases/open/${caseId}`, {
                method: 'POST'
            });

            const data = await response.json();
            console.log('–û—Ç–≤–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', data);

            if (data.success) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                if (typeof CaseOpening !== 'undefined') {
                    CaseOpening.showPrize(data.item);
                    window.auth.updateBalance(data.newBalance);
                } else {
                    // Fallback: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    Notifications.show(`–í—ã –ø–æ–ª—É—á–∏–ª–∏: ${data.item.name}`, 'success');
                    window.auth.updateBalance(data.newBalance);
                }
            } else {
                Notifications.show(data.message || '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞', 'error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
            Notifications.show('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞', 'error');
        }
    }
}