const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../../.env') });

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/nakawin';

class CaseManager {
    constructor() {
        this.isConnected = false;
    }

    async connect() {
        if (this.isConnected) return;
        
        try {
            await mongoose.connect(MONGODB_URI, {
                useNewUrlParser: true,
                useUnifiedTopology: true,
            });
            this.isConnected = true;
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
            throw error;
        }
    }

    async disconnect() {
        if (this.isConnected) {
            await mongoose.connection.close();
            this.isConnected = false;
            console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–µ–π—Å
    async addCase(caseData) {
        try {
            const { Case } = require('../models/Case');
            const newCase = new Case(caseData);
            await newCase.save();
            console.log('‚úÖ –ö–µ–π—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', caseData.name);
            return newCase;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞:', error.message);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–µ–π—Å—ã
    async getAllCases() {
        try {
            const { Case } = require('../models/Case');
            const cases = await Case.find({ isActive: true });
            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–µ–π—Å–æ–≤: ${cases.length}`);
            
            cases.forEach((caseItem, index) => {
                console.log(`\n${index + 1}. ${caseItem.name}`);
                console.log(`   üí∞ –¶–µ–Ω–∞: ${caseItem.price} –º–æ–Ω–µ—Ç`);
                console.log(`   üéÅ –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${caseItem.items.length}`);
                console.log(`   üÜî ID: ${caseItem._id}`);
            });
            
            return cases;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤:', error.message);
            throw error;
        }
    }

    // –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å
    async deleteCase(caseName) {
        try {
            const { Case } = require('../models/Case');
            const result = await Case.findOneAndUpdate(
                { name: caseName }, 
                { isActive: false },
                { new: true }
            );
            
            if (result) {
                console.log('‚úÖ –ö–µ–π—Å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', caseName);
            } else {
                console.log('‚ö†Ô∏è –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', caseName);
            }
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞:', error.message);
            throw error;
        }
    }

    // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ–π—Å—ã
    async clearAllCases() {
        try {
            const { Case } = require('../models/Case');
            const result = await Case.deleteMany({});
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∫–µ–π—Å–æ–≤: ${result.deletedCount}`);
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ–π—Å–æ–≤:', error.message);
            throw error;
        }
    }

    // –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–µ–π—Å—ã
    async addDefaultCases() {
        try {
            const { Case } = require('../models/Case');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–µ–π—Å—ã
            const existingCases = await Case.countDocuments();
            if (existingCases > 0) {
                console.log('‚ö†Ô∏è –ö–µ–π—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.');
                return;
            }

            const defaultCases = [
                {
                    name: "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–µ–π—Å",
                    image: "/images/start-case.png",
                    price: 100,
                    items: [
                        { name: "–ú–µ—á –Ω–æ–≤–∏—á–∫–∞", value: 50, chance: 25, image: "/images/novice-sword.png" },
                        { name: "–©–∏—Ç —É—á–µ–Ω–∏–∫–∞", value: 75, chance: 20, image: "/images/student-shield.png" },
                        { name: "–ö–æ–ª—å—Ü–æ –º–∞–≥–∏–∏", value: 150, chance: 15, image: "/images/magic-ring.png" },
                        { name: "–ê–º—É–ª–µ—Ç —Å–∏–ª—ã", value: 300, chance: 10, image: "/images/strength-amulet.png" },
                        { name: "–ë–æ—Ç–∏–Ω–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏", value: 200, chance: 15, image: "/images/speed-boots.png" },
                        { name: "–ù–∞—Ä—É—á–∏ –∑–∞—â–∏—Ç—ã", value: 100, chance: 15, image: "/images/defense-bracers.png" }
                    ]
                },
                {
                    name: "–≠–ø–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å",
                    image: "/images/epic-case.png",
                    price: 250,
                    items: [
                        { name: "–≠–ø–∏—á–µ—Å–∫–∏–π –º–µ—á", value: 300, chance: 20, image: "/images/epic-sword.png" },
                        { name: "–î–æ—Å–ø–µ—Ö –¥—Ä–∞–∫–æ–Ω–∞", value: 500, chance: 15, image: "/images/dragon-armor.png" },
                        { name: "–ö–æ–ª—å—Ü–æ –æ–≥–Ω—è", value: 400, chance: 15, image: "/images/fire-ring.png" },
                        { name: "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –¥—Ä–µ–≤–Ω–∏—Ö", value: 800, chance: 10, image: "/images/ancient-artifact.png" },
                        { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–ª–∏–Ω–æ–∫", value: 1500, chance: 5, image: "/images/legendary-blade.png" },
                        { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π —â–∏—Ç", value: 1200, chance: 5, image: "/images/mythic-shield.png" },
                        { name: "–ü–ª–∞—â –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç–∏", value: 600, chance: 15, image: "/images/invisibility-cloak.png" },
                        { name: "–ü–æ—Å–æ—Ö –º–∞–≥–∏–∏", value: 700, chance: 15, image: "/images/magic-staff.png" }
                    ]
                },
                {
                    name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å",
                    image: "/images/legendary-case.png",
                    price: 500,
                    items: [
                        { name: "–ú–µ—á –¥—Ä–∞–∫–æ–Ω–∞", value: 1000, chance: 15, image: "/images/dragon-sword.png" },
                        { name: "–©–∏—Ç —Ç–∏—Ç–∞–Ω–∞", value: 800, chance: 15, image: "/images/titan-shield.png" },
                        { name: "–ö–æ–ª—å—Ü–æ –±–µ—Å—Å–º–µ—Ä—Ç–∏—è", value: 600, chance: 15, image: "/images/immortal-ring.png" },
                        { name: "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –±–æ–≥–æ–≤", value: 2000, chance: 5, image: "/images/god-artifact.png" },
                        { name: "–ö–ª–∏–Ω–æ–∫ —Ç–µ–Ω–∏", value: 300, chance: 20, image: "/images/shadow-blade.png" },
                        { name: "–ù–∞—Ä—É—á–∏ —Å–∏–ª—ã", value: 200, chance: 15, image: "/images/power-bracers.png" },
                        { name: "–®–ª–µ–º –º—É–¥—Ä–æ—Å—Ç–∏", value: 400, chance: 10, image: "/images/wisdom-helmet.png" },
                        { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–æ—Å–ø–µ—Ö–∏", value: 1500, chance: 5, image: "/images/legendary-armor.png" }
                    ]
                },
                {
                    name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å",
                    image: "/images/mythic-case.png",
                    price: 750,
                    items: [
                        { name: "–ü–æ—Å–æ—Ö –≤—Å–µ–ª–µ–Ω–Ω–æ–π", value: 2500, chance: 5, image: "/images/universe-staff.png" },
                        { name: "–ú–µ—á —Ö–∞–æ—Å–∞", value: 1800, chance: 8, image: "/images/chaos-sword.png" },
                        { name: "–©–∏—Ç –ø–æ—Ä—è–¥–∫–∞", value: 1600, chance: 8, image: "/images/order-shield.png" },
                        { name: "–ö–æ–ª—å—Ü–æ –≤—Ä–µ–º–µ–Ω–∏", value: 1200, chance: 10, image: "/images/time-ring.png" },
                        { name: "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –≤–µ—á–Ω–æ—Å—Ç–∏", value: 3000, chance: 3, image: "/images/eternity-artifact.png" },
                        { name: "–ü–ª–∞—â —Ñ–µ–Ω–∏–∫—Å–∞", value: 900, chance: 12, image: "/images/phoenix-cloak.png" },
                        { name: "–ë–æ—Ç–∏–Ω–∫–∏ –≤–µ—Ç—Ä–∞", value: 700, chance: 15, image: "/images/wind-boots.png" },
                        { name: "–ü–µ—Ä—á–∞—Ç–∫–∏ –º–æ–ª–Ω–∏–∏", value: 800, chance: 13, image: "/images/lightning-gloves.png" },
                        { name: "–®–ª–µ–º –ø–æ–≤–µ–ª–∏—Ç–µ–ª—è", value: 1100, chance: 11, image: "/images/lord-helmet.png" },
                        { name: "–õ–µ–≥–µ–Ω–¥–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π", value: 5000, chance: 2, image: "/images/universe-legend.png" }
                    ]
                }
            ];

            console.log('üéÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤...\n');
            
            for (const caseData of defaultCases) {
                await this.addCase(caseData);
                await new Promise(resolve => setTimeout(resolve, 500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏
            }

            console.log('\nüéâ –í—Å–µ –∫–µ–π—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
            console.log('üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node caseManager.js list');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤:', error.message);
            throw error;
        }
    }

    // –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å
    async addTestCase() {
        const testCase = {
            name: "–¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å",
            image: "/images/test-case.png",
            price: 50,
            items: [
                { name: "–¢–µ—Å—Ç–æ–≤—ã–π –º–µ—á", value: 25, chance: 100, image: "/images/test-sword.png" }
            ]
        };
        
        await this.addCase(testCase);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤
async function setupDefaultCases() {
    const manager = new CaseManager();
    
    try {
        await manager.connect();
        await manager.addDefaultCases();
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await manager.disconnect();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
module.exports = { CaseManager, setupDefaultCases };

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const command = process.argv[2] || 'setup'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é setup
    
    async function main() {
        const manager = new CaseManager();
        
        try {
            await manager.connect();
            
            switch (command) {
                case 'list':
                    console.log('üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤...\n');
                    await manager.getAllCases();
                    break;
                    
                case 'setup':
                    console.log('üéÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤...\n');
                    await manager.addDefaultCases();
                    break;
                    
                case 'clear':
                    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–µ–π—Å–æ–≤...\n');
                    await manager.clearAllCases();
                    break;
                    
                case 'test':
                    console.log('üß™ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–µ–π—Å–∞...\n');
                    await manager.addTestCase();
                    break;
                    
                default:
                    console.log('üéÆ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ–π—Å–æ–≤ Nakawin Casino');
                    console.log('–ö–æ–º–∞–Ω–¥—ã:');
                    console.log('  node caseManager.js list    - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–µ–π—Å—ã');
                    console.log('  node caseManager.js setup   - –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–µ–π—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
                    console.log('  node caseManager.js clear   - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ–π—Å—ã');
                    console.log('  node caseManager.js test    - –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å');
                    break;
            }
            
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞:', error.message);
        } finally {
            await manager.disconnect();
        }
    }
    
    main();
}