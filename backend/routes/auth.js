const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const router = express.Router();

const JWT_SECRET = process.env.JWT_SECRET || 'nakawin-casino-secret-key-2024';

// Debug endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
router.get('/debug', (req, res) => {
    console.log('üîß Debug auth endpoint');
    res.json({ 
        message: 'Auth endpoint works',
        timestamp: new Date().toISOString()
    });
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', async (req, res) => {
    try {
        console.log('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', req.body);
        
        const { username, password, gameNickname, gameServer, bankAccount } = req.body;

        if (!username || !password) {
            return res.status(400).json({ 
                success: false,
                message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = await User.findOne({ username });
        if (existingUser) {
            return res.status(400).json({ 
                success: false,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
            });
        }

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = new User({ 
            username, 
            password,
            gameNickname: gameNickname || username,
            gameServer: gameServer || 'main',
            bankAccount: bankAccount || '0000000000'
        });
        
        await user.save();
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', username);

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '7d' });
        
        res.json({ 
            success: true,
            token,
            user: { 
                id: user._id,
                username: user.username, 
                balance: user.balance,
                gameNickname: user.gameNickname,
                gameServer: user.gameServer
            } 
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ 
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// –í—Ö–æ–¥
router.post('/login', async (req, res) => {
    try {
        console.log('üîê –í—Ö–æ–¥:', req.body);
        
        const { username, password } = req.body;

        if (!username || !password) {
            return res.status(400).json({ 
                success: false,
                message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' 
            });
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await User.findOne({ username });
        if (!user) {
            return res.status(400).json({ 
                success: false,
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ 
                success: false,
                message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' 
            });
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '7d' });
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);

        res.json({ 
            success: true,
            token,
            user: { 
                id: user._id,
                username: user.username, 
                balance: user.balance,
                gameNickname: user.gameNickname,
                gameServer: user.gameServer
            } 
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ 
            success: false,
            message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
        });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
router.get('/verify', async (req, res) => {
    try {
        let token = req.header('Authorization') || req.query.token;
        
        if (token && token.startsWith('Bearer ')) {
            token = token.slice(7);
        }

        if (!token) {
            return res.status(401).json({ 
                success: false, 
                message: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' 
            });
        }

        const decoded = jwt.verify(token, JWT_SECRET);
        const user = await User.findById(decoded.userId).select('-password');
        
        if (!user) {
            return res.status(401).json({ 
                success: false, 
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
            });
        }

        res.json({ 
            success: true,
            user: { 
                id: user._id,
                username: user.username, 
                balance: user.balance,
                gameNickname: user.gameNickname,
                gameServer: user.gameServer
            } 
        });
        
    } catch (error) {
        res.status(401).json({ 
            success: false, 
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' 
        });
    }
});

module.exports = router;